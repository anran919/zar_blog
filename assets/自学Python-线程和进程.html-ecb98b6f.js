const t=JSON.parse(`{"key":"v-336cfd98","path":"/posts/python/%E8%87%AA%E5%AD%A6Python-%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B.html","title":"自学Python-线程和进程","lang":"zh-CN","frontmatter":{"title":"自学Python-线程和进程","date":"2017-01-13T15:05:52.000Z","tags":"Python","description":"multiprocessing windows 创建多线程使用 multiprocessing linux unix 使用fork() 创建子线程的时候,只需要传入一个函数,和一个参数,创建一个Process实例,用start()方法启动,这样创建进程比fork()简单 from multiprocessing import Process import os # 子进程要执行的代码 def run_proc(name): print(os.getpid()) print(name) print(__name__) if __name__ == '__main__': print('prent process %s'%os.getpid() ) # 创建一个子线程 p = Process(target = run_proc,args = ('test',)) print(' child process will start ') # 开始子线程 p.start() # 放如线程队列 p.join() print(' child process end ')","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zar_blog/posts/python/%E8%87%AA%E5%AD%A6Python-%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"Anakin's blog"}],["meta",{"property":"og:title","content":"自学Python-线程和进程"}],["meta",{"property":"og:description","content":"multiprocessing windows 创建多线程使用 multiprocessing linux unix 使用fork() 创建子线程的时候,只需要传入一个函数,和一个参数,创建一个Process实例,用start()方法启动,这样创建进程比fork()简单 from multiprocessing import Process import os # 子进程要执行的代码 def run_proc(name): print(os.getpid()) print(name) print(__name__) if __name__ == '__main__': print('prent process %s'%os.getpid() ) # 创建一个子线程 p = Process(target = run_proc,args = ('test',)) print(' child process will start ') # 开始子线程 p.start() # 放如线程队列 p.join() print(' child process end ')"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-28T13:23:41.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:published_time","content":"2017-01-13T15:05:52.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-28T13:23:41.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://mister-hope.github.io/zar_blog/enposts/python/%E8%87%AA%E5%AD%A6Python-%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B.html"}]]},"headers":[{"level":3,"title":"multiprocessing","slug":"multiprocessing","link":"#multiprocessing","children":[]},{"level":3,"title":"Pool","slug":"pool","link":"#pool","children":[]},{"level":3,"title":"子进程","slug":"子进程","link":"#子进程","children":[]},{"level":3,"title":"进程间通信","slug":"进程间通信","link":"#进程间通信","children":[]},{"level":2,"title":"多线程","slug":"多线程","link":"#多线程","children":[{"level":3,"title":"Lock","slug":"lock","link":"#lock","children":[]},{"level":3,"title":"ThreadLocal","slug":"threadlocal","link":"#threadlocal","children":[]}]}],"git":{"createdTime":1672233821000,"updatedTime":1672233821000,"contributors":[{"name":"张安然","email":"anran0919@163.com","commits":1}]},"readingTime":{"minutes":2.57,"words":771},"filePathRelative":"posts/python/自学Python-线程和进程.md","localizedDate":"2017年1月13日","excerpt":"<h3> multiprocessing</h3>\\n<p>windows 创建多线程使用 <code>multiprocessing</code>\\nlinux unix 使用<code>fork()</code></p>\\n<ul>\\n<li>\\n<p>创建子线程的时候,只需要传入一个函数,和一个参数,创建一个<code>Process</code>实例,用<code>start()</code>方法启动,这样创建进程比<code>fork()</code>简单</p>\\n<pre><code>  from multiprocessing import Process\\n  import os\\n  # 子进程要执行的代码\\n  def run_proc(name):\\n      print(os.getpid())\\n      print(name)\\n\\n  print(__name__)\\n  if __name__ == '__main__':\\n      print('prent process %s'%os.getpid() )\\n      # 创建一个子线程\\n      p = Process(target = run_proc,args = ('test',))\\n      print(' child process will start ')\\n      # 开始子线程\\n      p.start()\\n      # 放如线程队列\\n      p.join()\\n      print(' child process end ')\\n</code></pre>\\n</li>\\n</ul>","autoDesc":true}`);export{t as data};
