import{_ as a,V as e,W as n,a1 as s}from"./framework-5e2051d8.js";const t={},l=s(`<h2 id="观察者模式" tabindex="-1"><a class="header-anchor" href="#观察者模式" aria-hidden="true">#</a> 观察者模式</h2><h3 id="实现过程" tabindex="-1"><a class="header-anchor" href="#实现过程" aria-hidden="true">#</a> 实现过程</h3><ol><li>观察者模式基本组成是，观察者Observer和被观察者（观察目标）Subject,当目标发生改变的时候，观察者会随之改变</li><li>一个被观察者可以被多个观察者观察</li><li>被观察者一般提供一个集合保存观察者，提供对观察者的管理，删除和增加观察者，提供一个抽象的notify方法，由具体的被观察者实现，实现方式为，遍历观察者的集合，调用观察者的update()方法，通知每一个观察者</li><li>观察者申明为一个接口，一般提供update()方法，由不同的观察者去实现，具体的观察者在接收到观察者的notify()后做出相应的更新</li></ol><h3 id="要点" tabindex="-1"><a class="header-anchor" href="#要点" aria-hidden="true">#</a> 要点</h3><ol><li>观察者提供update()方法，在update()方法中变量观察者的集合，调用观察者的update()方法</li><li>一般定义被观察者为抽象类提供管理观察者的方法，和抽象的notify()方法</li><li>一般将观察者声明为接口，提供update()方法，由具体的观察者去实现，根据需要对被观察者的改变做出不同的实现</li></ol><h3 id="实例" tabindex="-1"><a class="header-anchor" href="#实例" aria-hidden="true">#</a> 实例</h3><p>** 背景：**</p><p>以游戏为例，多人组队玩一个游戏，当有一个人遭受攻击时向控制中心发消息，控制中心收到消息通知每个队友，队友收到消息过来支援</p><ul><li>每个队员都作为观察者，被观察者为控制中心</li><li>当有队员Player受到攻击时，调用控制中心的notifyObsever() 方法，在notifyObsever()方法中遍历观察者也就是所有队员，会调用所有队友的help() 方法</li></ul><h3 id="代码过程" tabindex="-1"><a class="header-anchor" href="#代码过程" aria-hidden="true">#</a> 代码过程</h3><ol><li><p>观察者的接口 ：观察者的接口Observer 申明了help（），beAttached()方法</p></li><li><p>具体的观察者 ：具体的观察者Player类，实现接口中的方法</p></li><li><p>被观察者抽象类 ：被观察者抽象类AllyControlCenter,包括对观察的管理的集合和join()和quit()方法，和通知每个观察者的抽象方法notifyObsever()方法，</p></li><li><p>被观察者 ：被观察者的实现类ConcreteAllyControlCenter ，是先notifyObsever()方法，遍历观察者集合，调用每个人观察者对象的help()方法</p></li><li><p>客户端 ：创建观察者对象Observer player = new Player()，创建被观察者实例AllyControlCenter ally = new ConcreteAllyControlCenter();，将观察者加入到集合中， all.join(Player),player调用beAttached(),所有观察者收到消息调用help()方法，（当被观察者触发beAttached() 方法时候，在beAttached()中调用notifyObsever() 方法通知每个观察者调用help()方法）</p></li></ol><h3 id="代码调用流程" tabindex="-1"><a class="header-anchor" href="#代码调用流程" aria-hidden="true">#</a> 代码调用流程</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> player<span class="token punctuation">.</span><span class="token function">beAttached</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token class-name">AllyControlCenter</span><span class="token punctuation">.</span><span class="token function">notifyObsever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">&gt;</span> player<span class="token punctuation">.</span><span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,13),o=[l];function i(r,p){return e(),n("div",null,o)}const d=a(t,[["render",i],["__file","设计模式-观察者模式.html.vue"]]);export{d as default};
