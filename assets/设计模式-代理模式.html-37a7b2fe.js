const e=JSON.parse(`{"key":"v-d1280c4e","path":"/posts/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html","title":"代理模式.md","lang":"zh-CN","frontmatter":{"title":"代理模式.md","date":"2017-02-17T11:25:59.000Z","tags":["设计模式"],"description":"代理模式 定义 代理模式是对象结构模式,代理模式给某个对象提供一个代理对象,并由代理对象控制控制原对象的引用. 使用场景 简单实现 定义抽象类 package com.anakin.design_pattern_test.proxy_method; /** * Created by demo on 2017/2/8 0008 */ public abstract class AbstractObject { // 需要的操作 public abstract void operation(); }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zar_blog/posts/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Anakin's blog"}],["meta",{"property":"og:title","content":"代理模式.md"}],["meta",{"property":"og:description","content":"代理模式 定义 代理模式是对象结构模式,代理模式给某个对象提供一个代理对象,并由代理对象控制控制原对象的引用. 使用场景 简单实现 定义抽象类 package com.anakin.design_pattern_test.proxy_method; /** * Created by demo on 2017/2/8 0008 */ public abstract class AbstractObject { // 需要的操作 public abstract void operation(); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-28T13:23:41.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2017-02-17T11:25:59.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-28T13:23:41.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://mister-hope.github.io/zar_blog/enposts/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html"}]]},"headers":[{"level":2,"title":"代理模式","slug":"代理模式","link":"#代理模式","children":[{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":3,"title":"简单实现","slug":"简单实现","link":"#简单实现","children":[]}]}],"git":{"createdTime":1672233821000,"updatedTime":1672233821000,"contributors":[{"name":"张安然","email":"anran0919@163.com","commits":1}]},"readingTime":{"minutes":0.76,"words":229},"filePathRelative":"posts/java/设计模式-代理模式.md","localizedDate":"2017年2月17日","excerpt":"<h2> 代理模式</h2>\\n<h3> 定义</h3>\\n<p>代理模式是对象结构模式,代理模式给某个对象提供一个代理对象,并由代理对象控制控制原对象的引用.</p>\\n<h3> 使用场景</h3>\\n<h3> 简单实现</h3>\\n<p>定义抽象类</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">package</span> <span class=\\"token namespace\\">com<span class=\\"token punctuation\\">.</span>anakin<span class=\\"token punctuation\\">.</span>design_pattern_test<span class=\\"token punctuation\\">.</span>proxy_method</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Created by demo on 2017/2/8 0008\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">abstract</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">AbstractObject</span> <span class=\\"token punctuation\\">{</span>\\n\\n        <span class=\\"token comment\\">// 需要的操作</span>\\n        <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">abstract</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">operation</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{e as data};
