const e=JSON.parse(`{"key":"v-f537cc42","path":"/posts/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html","title":"观察者模式.md","lang":"zh-CN","frontmatter":{"title":"观察者模式.md","date":"2017-02-17T11:25:59.000Z","category":["Java"],"tags":["设计模式"],"description":"观察者模式 实现过程 观察者模式基本组成是，观察者Observer和被观察者（观察目标）Subject,当目标发生改变的时候，观察者会随之改变 一个被观察者可以被多个观察者观察 被观察者一般提供一个集合保存观察者，提供对观察者的管理，删除和增加观察者，提供一个抽象的notify方法，由具体的被观察者实现，实现方式为，遍历观察者的集合，调用观察者的update()方法，通知每一个观察者 观察者申明为一个接口，一般提供update()方法，由不同的观察者去实现，具体的观察者在接收到观察者的notify()后做出相应的更新","head":[["meta",{"property":"og:url","content":"https://github.com/zar_blog/posts/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Anakin's blog"}],["meta",{"property":"og:title","content":"观察者模式.md"}],["meta",{"property":"og:description","content":"观察者模式 实现过程 观察者模式基本组成是，观察者Observer和被观察者（观察目标）Subject,当目标发生改变的时候，观察者会随之改变 一个被观察者可以被多个观察者观察 被观察者一般提供一个集合保存观察者，提供对观察者的管理，删除和增加观察者，提供一个抽象的notify方法，由具体的被观察者实现，实现方式为，遍历观察者的集合，调用观察者的update()方法，通知每一个观察者 观察者申明为一个接口，一般提供update()方法，由不同的观察者去实现，具体的观察者在接收到观察者的notify()后做出相应的更新"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-29T13:57:20.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2017-02-17T11:25:59.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-29T13:57:20.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://github.com/zar_blog/enposts/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html"}]]},"headers":[{"level":2,"title":"观察者模式","slug":"观察者模式","link":"#观察者模式","children":[{"level":3,"title":"实现过程","slug":"实现过程","link":"#实现过程","children":[]},{"level":3,"title":"要点","slug":"要点","link":"#要点","children":[]},{"level":3,"title":"实例","slug":"实例","link":"#实例","children":[]},{"level":3,"title":"代码过程","slug":"代码过程","link":"#代码过程","children":[]},{"level":3,"title":"代码调用流程","slug":"代码调用流程","link":"#代码调用流程","children":[]}]}],"git":{"createdTime":1672233821000,"updatedTime":1672322240000,"contributors":[{"name":"张安然","email":"anran0919@163.com","commits":2}]},"readingTime":{"minutes":2.33,"words":699},"filePathRelative":"posts/java/设计模式-观察者模式.md","localizedDate":"2017年2月17日","excerpt":"<h2> 观察者模式</h2>\\n<h3> 实现过程</h3>\\n<ol>\\n<li>观察者模式基本组成是，观察者Observer和被观察者（观察目标）Subject,当目标发生改变的时候，观察者会随之改变</li>\\n<li>一个被观察者可以被多个观察者观察</li>\\n<li>被观察者一般提供一个集合保存观察者，提供对观察者的管理，删除和增加观察者，提供一个抽象的notify方法，由具体的被观察者实现，实现方式为，遍历观察者的集合，调用观察者的update()方法，通知每一个观察者</li>\\n<li>观察者申明为一个接口，一般提供update()方法，由不同的观察者去实现，具体的观察者在接收到观察者的notify()后做出相应的更新</li>\\n</ol>","autoDesc":true}`);export{e as data};
