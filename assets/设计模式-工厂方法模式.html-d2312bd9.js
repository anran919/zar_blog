import{_ as e,V as o,W as r,a1 as g}from"./framework-5e2051d8.js";const l={},i=g('<h2 id="工厂方法模式" tabindex="-1"><a class="header-anchor" href="#工厂方法模式" aria-hidden="true">#</a> 工厂方法模式</h2><p>和简单工厂模式不同是,简单工厂模式,实例都由一个工厂类创建,工厂类的代码量会比较多,而且增加新的对象需要修改工厂类的代码,增加if else 的判断.</p><p>工厂模式,创建产品的抽象类和实现类,以及工厂的抽象类和实现类.</p><p>以打印log为例,log的存储方式可以是db也可以是file中,需要创建Logger的抽象类,具体是FileLogger实现类和DbLogger的实现类,工厂的抽象类LoggerFactory,和具体的实现类DbLoggerFactory,FileLoggerFactory</p><ol><li>在抽象Logger类中定义公共的抽象方法writeLog()</li><li>在具体实现类DbLogger和FileLogger中实现各自的具体的writeLog方法</li><li>在抽象的工厂类中定义抽象的创建对象的方法creatLogger()</li><li>在具体的实类DbLoggerFactory,FileLoggerFactory中实现方法,创建DbLogger和FileLogger的实例,并返回其父类Logger</li><li>客户端的使用 : 根据需要创建工厂的实例,调用实例中创建对象的方法creatLogger返回具体log存放的实例对象,在调用具体打印log的方法writeLog()</li></ol>',5),t=[i];function a(_,c){return o(),r("div",null,t)}const s=e(l,[["render",a],["__file","设计模式-工厂方法模式.html.vue"]]);export{s as default};
