const t=JSON.parse(`{"key":"v-23bac6bf","path":"/posts/java/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html","title":"Java设计模式.md","lang":"zh-CN","frontmatter":{"title":"Java设计模式.md","date":"2017-02-17T11:25:59.000Z","category":["Java"],"tag":["Java"],"description":"设计原则 1.单一职责原则 :### 一个类只负责一个功能领域中的相应职责 2. 开闭原则 : 一个软件实体应当对扩展开放，对修改关闭 3. 里氏代换原则 : 所有应用基类（父类）的地方，必须能透明的使用其子类对象 使用原则 : 在程序设计时,尽量使用基类类型对对象进行定义,而在运行时再确定子类类型,用子类对象替换父类对象","head":[["meta",{"property":"og:url","content":"https://github.com/zar_blog/posts/java/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Anakin's blog"}],["meta",{"property":"og:title","content":"Java设计模式.md"}],["meta",{"property":"og:description","content":"设计原则 1.单一职责原则 :### 一个类只负责一个功能领域中的相应职责 2. 开闭原则 : 一个软件实体应当对扩展开放，对修改关闭 3. 里氏代换原则 : 所有应用基类（父类）的地方，必须能透明的使用其子类对象 使用原则 : 在程序设计时,尽量使用基类类型对对象进行定义,而在运行时再确定子类类型,用子类对象替换父类对象"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-29T13:57:20.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2017-02-17T11:25:59.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-29T13:57:20.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://github.com/zar_blog/enposts/java/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html"}]]},"headers":[{"level":2,"title":"设计原则","slug":"设计原则","link":"#设计原则","children":[{"level":3,"title":"1.单一职责原则 :###","slug":"_1-单一职责原则","link":"#_1-单一职责原则","children":[]},{"level":3,"title":"2. 开闭原则 :","slug":"_2-开闭原则","link":"#_2-开闭原则","children":[]},{"level":3,"title":"3. 里氏代换原则 :","slug":"_3-里氏代换原则","link":"#_3-里氏代换原则","children":[]},{"level":3,"title":"4. 依赖倒转原则","slug":"_4-依赖倒转原则","link":"#_4-依赖倒转原则","children":[]}]}],"git":{"createdTime":1672233821000,"updatedTime":1672322240000,"contributors":[{"name":"张安然","email":"anran0919@163.com","commits":2}]},"readingTime":{"minutes":0.97,"words":290},"filePathRelative":"posts/java/Java设计模式.md","localizedDate":"2017年2月17日","excerpt":"<h2> 设计原则</h2>\\n<h3> 1.单一职责原则 :###</h3>\\n<blockquote>\\n<p>一个类只负责一个功能领域中的相应职责</p>\\n</blockquote>\\n<h3> 2. 开闭原则 :</h3>\\n<blockquote>\\n<p>一个软件实体应当对扩展开放，对修改关闭</p>\\n</blockquote>\\n<h3> 3. 里氏代换原则 :</h3>\\n<blockquote>\\n<p>所有应用基类（父类）的地方，必须能透明的使用其子类对象</p>\\n</blockquote>\\n<ol>\\n<li>使用原则 : 在程序设计时,尽量使用基类类型对对象进行定义,而在运行时再确定子类类型,用子类对象替换父类对象</li>\\n</ol>","autoDesc":true}`);export{t as data};
