import{_ as e,V as i,W as l,X as a,Y as r,$ as t,a1 as n,D as c}from"./framework-5e2051d8.js";const o={},d=n(`<h3 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h3><ul><li>容器重命名 <code>docker rename 旧名字 新名字</code></li><li>mac系统查看docker服务名</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>launchctl list <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>关闭并重新启动</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 如果这条命令没有启动,使用app图形界面重启</span>
launchctl stop com.docker.docker.1376 <span class="token operator">&amp;&amp;</span> launchctl start com.docker.docker.1376
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="镜像commit" tabindex="-1"><a class="header-anchor" href="#镜像commit" aria-hidden="true">#</a> 镜像commit</h3><blockquote><p>在原有的ubuntu容器的基础上保存一个自己的安装有vim的镜像</p></blockquote><ol><li>录取镜像</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull ubuntu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>启动镜像</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> ubuntu ba6acccedd29  /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>安装vim</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">apt-get</span> update 
<span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">vim</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>commit 保存镜像</li></ol><blockquote><p>commit一个名叫<code>zar/ubuntu:1.0</code>镜像,备注为<code>安装了vim</code>,作者:<code>张安然</code></p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#docker commit -m&quot;备注&quot; -a=&quot;作者&quot; 容器ID 创建的目标镜像名字:[标签名]</span>
<span class="token function">docker</span> commit -m<span class="token string">&quot;安装了vim&quot;</span> <span class="token parameter variable">-a</span><span class="token operator">=</span><span class="token string">&quot;张安然&quot;</span> b495980aba6b zar/ubuntu:1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>查看镜像</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="新镜像推送到私服仓库" tabindex="-1"><a class="header-anchor" href="#新镜像推送到私服仓库" aria-hidden="true">#</a> 新镜像推送到私服仓库</h3><ol><li>拉取registry镜像</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull registry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>运行私有仓库命令</li></ol><blockquote><ul><li>-d : 后台运行</li><li>-v : 宿主机映射</li></ul></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">5000</span>:5000 <span class="token parameter variable">-v</span> ~/docker_cp/zar_registry/:/tmp/registry <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true registry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>修改容器的名字(可以不做修改)</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rename</span> condescending_snyder rigistry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>curl验证私服库中有哪些镜像</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> http://localhost:5000/v2/_catalog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>将镜像修改成符合私服规范的tag</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#docker tag 镜像名:镜像tag host:port/存储到仓库的镜像名:tag</span>
<span class="token function">docker</span> tag zar/ubuntu:1.0 localhost:5000/ubuntu:1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>修改配置文件,使其支持http</li></ol><blockquote><p>默认不支持http</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 在mac系统下,查看daemon.json</span>
<span class="token function">cat</span> .docker/daemon.json
<span class="token comment"># 修改daemon.json</span>
<span class="token function">vim</span> .docker/daemon.json
<span class="token punctuation">{</span>
<span class="token comment">#  &quot;experimental&quot; : false,</span>
<span class="token comment">#  &quot;insecure-registries&quot; : [</span>
<span class="token comment">#    &quot;https://lepoazj6.mirror.aliyuncs.com&quot;</span>
<span class="token comment">#  ],</span>
<span class="token comment">#  &quot;debug&quot; : true,</span>
<span class="token comment">#  &quot;registry-mirrors&quot; : [</span>
<span class="token comment">#    &quot;https://lepoazj6.mirror.aliyuncs.com&quot;</span>
<span class="token comment">#  ],</span>
  <span class="token string">&quot;insecure-registries&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">&quot;localhost:5000&quot;</span><span class="token punctuation">]</span> <span class="token comment"># 增加这行配置</span>
<span class="token punctuation">}</span>
<span class="token comment"># 修改完后重启docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>重启私服仓库</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">5000</span>:5000 <span class="token parameter variable">-v</span> ~/docker_cp/zar_registry/:/tmp/registry <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true registry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="8"><li>push 推送到私有服</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> push localhost:5000/ubuntu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="9"><li>curl 验证私有服有什么镜像</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ni$ <span class="token function">curl</span> <span class="token parameter variable">-XGET</span> http://localhost:5000/v2/_catalog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="10"><li>pull 本地并运行</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 删除本地镜像</span>
<span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> localhost:5000/ubuntu:1.0
<span class="token comment"># 拉取私有仓库镜像</span>
<span class="token function">docker</span> pull localhost:5000/ubuntu:1.0
<span class="token comment"># 运行</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> localhost:5000/ubuntu:1.0 /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例" aria-hidden="true">#</a> 使用示例</h3><h4 id="安装nginx-映射本地文件" tabindex="-1"><a class="header-anchor" href="#安装nginx-映射本地文件" aria-hidden="true">#</a> 安装Nginx,映射本地文件</h4>`,43),p={href:"https://blog.csdn.net/DPXXMT/article/details/117914728",target:"_blank",rel:"noopener noreferrer"},u=n(`<h5 id="下载镜像" tabindex="-1"><a class="header-anchor" href="#下载镜像" aria-hidden="true">#</a> 下载镜像</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="启动镜像" tabindex="-1"><a class="header-anchor" href="#启动镜像" aria-hidden="true">#</a> 启动镜像</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">6666</span>:80 <span class="token parameter variable">--name</span> nginx <span class="token parameter variable">-d</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="将容器内的配置文件拷贝到当前目录" tabindex="-1"><a class="header-anchor" href="#将容器内的配置文件拷贝到当前目录" aria-hidden="true">#</a> 将容器内的配置文件拷贝到当前目录</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> container <span class="token function">cp</span> nginx:/etc/nginx <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="终止nginx容器-并删除容器" tabindex="-1"><a class="header-anchor" href="#终止nginx容器-并删除容器" aria-hidden="true">#</a> 终止Nginx容器,并删除容器</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop Nginx
<span class="token function">docker</span>  <span class="token function">rm</span> nginx 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="修改当前目录名称为conf-然后把conf移动到需要映射的目录" tabindex="-1"><a class="header-anchor" href="#修改当前目录名称为conf-然后把conf移动到需要映射的目录" aria-hidden="true">#</a> 修改当前目录名称为conf，然后把conf移动到需要映射的目录</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mv</span> nginx conf
<span class="token function">mkdir</span> nginx 
<span class="token function">mv</span> conf ./nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="重新创建容器" tabindex="-1"><a class="header-anchor" href="#重新创建容器" aria-hidden="true">#</a> 重新创建容器</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">6666</span>:80 <span class="token parameter variable">--name</span> nginx <span class="token parameter variable">-v</span> ~/docker_cp/nginx/html:/usr/share/nginx/html <span class="token parameter variable">-v</span> ~/docker_cp/nginx/logs:/var/log/nginx <span class="token parameter variable">-v</span> ~/docker_cp/nginx/conf:/etc/nginx <span class="token parameter variable">-d</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="docker挂载宿主机目录" tabindex="-1"><a class="header-anchor" href="#docker挂载宿主机目录" aria-hidden="true">#</a> docker挂载宿主机目录</h3><div class="custom-container warning"><p class="custom-container-title">注意</p><blockquote><p>主要:如果在挂载宿主机目录访问出现权限拒绝,在挂载的命令后加上 --privileged=true</p></blockquote></div><h4 id="宿主机和容器卷挂载的命令" tabindex="-1"><a class="header-anchor" href="#宿主机和容器卷挂载的命令" aria-hidden="true">#</a> 宿主机和容器卷挂载的命令</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># [宿主机目录路径]如果不存在会自动创建</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> <span class="token punctuation">[</span>宿主机目录路径<span class="token punctuation">]</span>:<span class="token punctuation">[</span>容器内目录路径<span class="token punctuation">]</span>:<span class="token punctuation">[</span>rw<span class="token punctuation">(</span>默认可以读写<span class="token punctuation">)</span>或者ro<span class="token punctuation">(</span>read only 只读<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>镜像名<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>示例一</li></ul><blockquote><p>将镜像zar/ubuntu:1.0创建的容器的/tmp/docker_data目录,挂载到宿主机的~/docker_cp/tmpmul</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#  启动容器.挂载目录到宿主机</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> ~/docker_cp/tmp:/tmp/docker_data <span class="token parameter variable">--name</span><span class="token operator">=</span>u1 zar/ubuntu:1.0
<span class="token comment"># 退出容器,回到宿主机</span>
<span class="token builtin class-name">cd</span> ~/docker_cp/tmp
<span class="token function">touch</span> v.txt 
<span class="token comment"># 重新进入容器</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> e72248f59488 /bin/bash
<span class="token builtin class-name">cd</span> /tmp/docker_data
<span class="token comment"># 查看,这时候docker_data目录下也有v.txt</span>
<span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="容器卷的rw和ro读写规则" tabindex="-1"><a class="header-anchor" href="#容器卷的rw和ro读写规则" aria-hidden="true">#</a> 容器卷的rw和ro读写规则</h4><ul><li>默认为rw,可读可写</li><li>ro,为只读</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 只读:ro eg:</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> ~/docker_cp/tmp/um:/tmp/um:ro <span class="token parameter variable">--name</span><span class="token operator">=</span>u1 zar/ubuntu:1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="容器卷的继承" tabindex="-1"><a class="header-anchor" href="#容器卷的继承" aria-hidden="true">#</a> 容器卷的继承</h4><ol><li>容器1完成宿主机的映射</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> ~/docker_cp/tmp/u1:/tmp/u1 <span class="token parameter variable">--name</span><span class="token operator">=</span>u1 zar/ubuntu:1.0
<span class="token builtin class-name">cd</span> /tmp/u1
<span class="token function">touch</span> log.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>容器2继承容器1的映射</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#docker run -it --privileged=true --volumes-from 父类 --name=u2 zar/ubuntu:1.0</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true --volumes-from u1 <span class="token parameter variable">--name</span><span class="token operator">=</span>u2 zar/ubuntu:1.0
<span class="token function">ls</span> tmp/ <span class="token comment"># 此时容器u2继承了u1的映射关系,/tmp 目录下也有u1目录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li></li></ol>`,28);function m(v,b){const s=c("ExternalLinkIcon");return i(),l("div",null,[d,a("blockquote",null,[a("p",null,[a("a",p,[r("docker安装Nginx，映射本地文件"),t(s)])])]),u])}const k=e(o,[["render",m],["__file","docker学习笔记.html.vue"]]);export{k as default};
