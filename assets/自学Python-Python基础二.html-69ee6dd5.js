import{_ as e,V as t,W as i,a1 as a}from"./framework-5e2051d8.js";const l={},s=a(`<h2 id="使用list和tuple" tabindex="-1"><a class="header-anchor" href="#使用list和tuple" aria-hidden="true">#</a> 使用list和tuple</h2><h3 id="list集合" tabindex="-1"><a class="header-anchor" href="#list集合" aria-hidden="true">#</a> list集合</h3><blockquote><p>list 是一种有序集合,可以随时添加和删除元素</p></blockquote><pre><code>classmates =[&#39;xxx&#39;,&#39;yyyy&#39;,&#39;zzzz&#39;]
print(classmate)
</code></pre><blockquote><p>使用索引获取每个位置的元素,索引从0开始</p></blockquote><pre><code>classmates[1] # 结果&#39;l&#39;
</code></pre><blockquote><p>当索引超出边界会报IndexError</p></blockquote><p><strong>增加元素</strong></p><ul><li>classmates.append(&#39;Adam&#39;)</li></ul><p><strong>插入元素</strong></p><ul><li>classmates.insert(1,&#39;ankain&#39;),(插入的位置,插入的元素)</li></ul><p><strong>删除末尾的元素</strong></p><ul><li>classmats.pop()</li></ul><p><strong>删除指定位置元素</strong></p><ul><li>classmates.pop(1) ,(删除元素的索引)</li></ul><p><strong>替换元素</strong></p><ul><li>classmats[1]=&#39;直接给索引赋值&#39;</li></ul><blockquote><p>list 中的元素也可以是list</p></blockquote><h3 id="tuple有序列列表叫做元组" tabindex="-1"><a class="header-anchor" href="#tuple有序列列表叫做元组" aria-hidden="true">#</a> tuple有序列列表叫做元组</h3><p>tuple与list类似,但是tuple一旦初始化就不能被修改,没有增加和删除的等方法,获取元素方式和list一样</p><pre><code>初始化:f=()
</code></pre><h2 id="条件判断" tabindex="-1"><a class="header-anchor" href="#条件判断" aria-hidden="true">#</a> 条件判断</h2><pre><code>age =3
if age &gt;= 18:
	print(&#39;年轻人&#39;)
elif age&gt;=6:
	print(&#39;小孩子&#39;)
else:
	print(&#39;其他&#39;)
</code></pre><h3 id="input" tabindex="-1"><a class="header-anchor" href="#input" aria-hidden="true">#</a> input</h3><p>录入用户的输入到年龄 使用birth接收 birth = input(&#39;borth&#39;) if birth&gt;=18: print(&#39;chengnianren&#39;) elif birth&gt;=60: print(&#39;old man&#39;) else: print(&#39;hahhahhh&#39;)</p><h3 id="循环" tabindex="-1"><a class="header-anchor" href="#循环" aria-hidden="true">#</a> 循环</h3><p>Python有两种循环</p><ol><li>for ..in sum =0 for x in range(101): sum+=x print(sum)</li><li>while n= 101 sum =0 sum=sum+n n=n-2 print(sum)</li></ol><h3 id="dict和set" tabindex="-1"><a class="header-anchor" href="#dict和set" aria-hidden="true">#</a> dict和set</h3><p>dict 就像java 中的map使用键值对key - velues 存储,查找速度快 set 也是一组key的集合,但是没有value ,而且不能存储重复的元素</p><h3 id="dict" tabindex="-1"><a class="header-anchor" href="#dict" aria-hidden="true">#</a> dict</h3><pre><code>map ={&#39;xiaoming&#39;:90,&#39;xiaohong&#39;:100,&#39;laowang&#39;:99}
print(map[&#39;xiaoming&#39;])
</code></pre><ul><li>一个key只能对应一个value 重复放入同一个key会把前面的value冲掉</li><li>如果key不存在,会报错</li><li>判断key是否存在一种方法 : <code>&#39;anakin&#39; in map</code></li><li>另外一种方法 : <code>map.get(&quot;key&quot;)</code> 返回None 或者对应的value</li></ul><p><strong>删除key</strong></p><ul><li><code>key.pop(&#39;key&#39;)</code> 对应的value也会被删除 <strong>dict和list的区别</strong></li></ul><ol><li>查找和插入速度快,不会随着key的增加而变慢</li><li>需要占用大量内存</li><li>list则相反</li></ol><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> set</h3><p>是一个无序,不重复的集合 <strong>创建set</strong></p><ul><li>创建set需要提供一个list : <code>s =set([1,2,3])</code></li></ul><p><strong>增加元素</strong></p><ul><li>通过add(&#39;add&#39;) 重复添加没有效果</li></ul><p><strong>删除元素</strong></p><ul><li>通过remove(key) 删除元素</li></ul><p><strong>交集和并集运算</strong> s1 = set([1,2,3]) s2 = set([1,2,4]) print(s1&amp;s2) print(s1|s2)</p><h3 id="可变对象和不可变对象" tabindex="-1"><a class="header-anchor" href="#可变对象和不可变对象" aria-hidden="true">#</a> 可变对象和不可变对象</h3><ul><li>str 是不可变对象</li><li>list 是可变对象</li></ul>`,46),n=[s];function r(o,d){return t(),i("div",null,n)}const h=e(l,[["render",r],["__file","自学Python-Python基础二.html.vue"]]);export{h as default};
